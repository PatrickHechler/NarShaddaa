package de.tafelwischenSecure.benutzer;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.IOException;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.internal.matchers.StartsWith;

import de.tafelwischenSecure.Constants;
import de.tafelwischenSecure.Rules;
import de.tafelwischenSecure.Schnittstelle;
import de.tafelwischenSecure.exceptions.UserAlreadyExistsException;
import de.tafelwischenSecure.exceptions.UserException;
import de.tafelwischenSecure.komm.KommunikationInterface;
import de.tafelwischenSecure.komm.sec.SecurityManagerInterface;
import de.tafelwischenSecure.komm.sec.VerschlüsselteServerNachricht;
import de.tafelwischenSecure.rsa.schlüssel.AssymetrischPaar;
import de.tafelwischenSecure.rsa.schlüssel.eigener.AssymetrischEigener;

class BenutzerMockTest {
	
	private static final String NEW_USER_THING_WHICH_COME_FROM_SERVER = "Das sind die sachen, des neuen Benutzers";
	private static final VerschlüsselteServerNachricht VERSCHLÜSSELT_NEW_USER_SENDING = new VerschlüsselteServerNachricht(1254l, "4521",
			"Dies Ist Verschlüsselt.");
	private static final String NEW_USERNAME = "PATRICKhechler";
	private static final long EXISTING_USER_PW = 12548L;
	private static final long NEW_USER_PW = 68415564l;
	private static final String NEW_USER_PRIKEY = "30820943020100300D06092A864886F70D01010105000482092D308209290201000282020100BEE6F78F9161020DE6AD7CB4116F36704399F093A1EA2447415811A37D1D257EDA716BB0DE92669F311CD5E9FDE58CF85AD20D664CB1D7D36CCDAF37026741B22EC39658C3AA8A9EFC4C6504E541ACC2EE2EE2D77B82DBE40DFAF3E508BDCD01B47DBBA1B29496C9FB1FE39F0024D55CA956A4AE97465F3D033DEBF1DE36DEBF9A2758632AB955D3E7B955D79511728BE07AFA3A14A6D81B7FD958CA777EAEB66A69ABBDD29A9D5C91FBDFBA2DFA9F45674ABCC856189273A160395FE1523419EF43E4745D97E48196C77540A44C6E8B3D683D49385669C08823FC29BE4499A10387535C63B4440BEBDF5B4B40D250C2E858E29B031B07185889A706299057D4474508632C8F2C11B038A7D2D97A0EAC432E6E70DF69028D72993016F88BAED1E6313AAA0B6ACA44825A80D829D263E9179E65E40FCB86AFF7EE2F4624E1589FAB4B704A118C7A2907C57F070B3BBEB6741D334FEDCC7974B983601B74B6DFA32D74C5597E3B6543828A567C953416B0C487038C0DF525476275BA045E726D40D256DBB93C898C6D522A7ADB88514959C8FDC47B619FE31520065812D788A4670155F9552CC935D735AE7965C70C4D439E0AB78871A89EFD68852ACF1F1AFF04D12E9F9BEDC0E89652B4EC6C6F747C56DC4CA3AAAF01C95E0AA1F0D1B48577F4690B21FE7735A1270C70385DEFCFA79C7A229A8478F10EFF6AD7A470BF41BAA30203010001028202010088AAC5748CB98C44F36E2426AD8C96C68C3EFAD2564A4FAA8B87472969FAA1CB4D0B81F35F8423DFB7C353096F711518FFBBFD47CD844C64DA31EE4C4D762ABC2B6A6E8A219A481F45B45365CBD2D6A1BEEEE60B2A2B26CCFF8D376A3275DEFC6780D40110DDFB8DA230D43E12564C414821F547E098CAB9DD46495220A9DB92040442ECCBBB5F4C934A45C04EC1ECE562D1E7AE08F6E123DEC575218DA6ADE17E11249882DB99E899C25E0AE5BBD4A6552A56387E1A9D4E16ABD2A767A1F816D10A23D582E3A8FD753A5A20EAFEA4ED1E0B3044E906443347C3AB551F17F17C2A1089874D01D2ED4DF1DB63E6862AB73EABD39EF1FC397A1E787D9095D4F66A8FFE8A3E04DD04267326E957142B7AFD9C98E88585A2FA434254B21E176E683F8286C2E1C677577E9A830B77E5019730561A94B8BEBB74C3F6E93D534240C4DA2307643EF7338CBA78996125D08B2DB3A9E185CD5A3D40A3DCBCF2CDCD974D4A379D742885B97BCBF3FA40E132533816B54302314DB1A77179203312BEB7B0DCBDCE19EF590D7B9A48D83CC73742467EEB43DC496DA554D366713D0A307DA8634F5A696BE70C875C39DCADC13519967CC6021C0765E16B021AA572CB219A1BAD159AE212F5DCBC08DDD2FAAE5A73F2494511F1F6A41C391871512369FBB55BA05507BDE7580D415837F186C51ABA41311DB63C0DFCBBA75836D9A03E13DDBDE10282010100E1113D6320A46D57345D1AFE31504F6236E39673442DE2B96F2CCE1D8153BC1C2971474EE0B754F85A6483FE8C8D9CD0E63D9A60E2B225FBCA27DBE267A6E43D5877807A88613B8AEDFFE034F1DEF0747DEFDD6E64AB296523422DA98BA7861C1D08A8EE0E2D9C03213CCD7B3211B33078D87D04B50A4FEEE2D5A390E32AAA645171B43A6D28E00AFDE6A5F7FC9EC943D41E7060A1839EC428BDEBAD7F090C5CFF7FB76AB2DD751B80641437F6DF63E23FF9B71EC42FD825BCCBC5A3F8C5EEF16EAA749675776C636EF5DEE67BA75022CBF56F97151B7C3C71395568CA0664BE152BA1B04BC918EA77EA53A6968F30C46C93BBC5A9079BC65AACD91A39D3D1090282010100D923A9AB7D400B3243D319DDAC64E5FD903ECFD6280061CE07ADF71FD649715CD6AD42AD62E524CB8CE7A608E572A1B27DA4436F6D5FA2DC0899819485635C325A2720BDB7ED45A261D170AFB708B8EB381DA511C22AD2E2FAB91B99C5ACD350C201794958E2E153EFD22F4BA42BE6FA2BF5CF58DEF691B6BCB48C3F8177256ED977F3E73FED1D9D766005633ED20475EF451A377BDBC809F8E2324CCE41F9EB9B1E1CF3FA86328C51993AF82C3DBDBFE3E22CDA114BDAFA9AA5F9459F26836A7E5AC9FCA4523FA2BEC0D42E4E7EB21B1EFA923783AA73201FB0EEA270FF9BA20DC50E02DC93A57C453347DD7AEE884EC182E672CFE7287339FF0A1BF3CFD54B0282010016B87ED1FB019E6827491EE87A61F9219918F09F424ABF90A8C0852E455806AD71219669481639E5B87A5D38DD478E8528391FD4980E13F78F38E6E1BC4504D58C90C3CF9AE4F5F5D880F44964017594CD01E200BAF8EC7CE14A5501C0AF70C275CBE201E63C847B6C678EF6D8DF208FCC234EBBA2EB1F96A61F9B1B8D53495047488B413AB3DDAA3E678269BE7EE92287CF6AD8D6754B19D26319DFB1EB5FEC237EE92D445146F937C4E2A5A3AE798EE59677FE0B202959E5ED4C4E7956C2006D8397B178BA4D9EDC1CC61BCE6FDD8F25B7E943FF457F0D3B00E6B6656EAFCCE0A63EF465322FE9BBA1544085027F91D4C43538870FD591F8A56A65536126C1028201006A3FAD1220A369D71AA0FD131EFBF01DF6AB057FC0EB0EF085897656B9C00E1C635F3C35232304B2252C646E0DF7DD6F3D53573BFAC4C527ED7D4F8EA1065162C2024B5F09D4AC321CB322F498174884B05CB11CD369A8EF2FC7CBDD9E8046964997F70510DD536C82F8D1F3AD4D5E2423C68FC2E8B6B5EE38C00FB033655D87B419A1DB11C8B0A90FF7442B9FDD9C19290F2318EB1E4BEFB53CD96803B4FCD9707977A95A78B7DB3942453C924953C3C57A328031DE703417E006ED2E46E61F01DCE2E12076AE74AFEA22E8D5B7E0E6AC6DE7860A8328FA1B07B47CFFD5D30DA4B73B77E2FECC06D6C594F0A6EA7900306820E3251FF3070EE5E0C874B0C9A90282010100AC712782D261026FED94DB903774D41D47B2720E541528A4DBCA2FA011BC50BCEBD49F125907D3919BDF941F13302F0308369F73C6C0F2B08B130C65174E0232905CF3E38048AAFC940672DE91B92D13CDEEBE4173161781643B8B353B48D42F360F2A1CABB709806E83EE74374ACD5360B917B486784AD5F0B207B2B336D2A96CA246DE61B217EEFBC13BEE3C671DAF5905DAA3393F7A75E575CD9474E70CA5DCE80ABA2233437F469624B26BCAF718F271613D669006FF054C744885407CDC70B7D4B7082674F5942DE48258DF3FEF2E9ACCE1E23F4757DEF7DDFFAF93ACAC598BEBC33D601448A7312FD4F61273006A52B9159CE61A122EAF110DF0CBD91C";
	private static final String
	private static final String NEW_USER_PUPKEY = "30820222300D06092A864886F70D01010105000382020F003082020A0282020100BEE6F78F9161020DE6AD7CB4116F36704399F093A1EA2447415811A37D1D257EDA716BB0DE92669F311CD5E9FDE58CF85AD20D664CB1D7D36CCDAF37026741B22EC39658C3AA8A9EFC4C6504E541ACC2EE2EE2D77B82DBE40DFAF3E508BDCD01B47DBBA1B29496C9FB1FE39F0024D55CA956A4AE97465F3D033DEBF1DE36DEBF9A2758632AB955D3E7B955D79511728BE07AFA3A14A6D81B7FD958CA777EAEB66A69ABBDD29A9D5C91FBDFBA2DFA9F45674ABCC856189273A160395FE1523419EF43E4745D97E48196C77540A44C6E8B3D683D49385669C08823FC29BE4499A10387535C63B4440BEBDF5B4B40D250C2E858E29B031B07185889A706299057D4474508632C8F2C11B038A7D2D97A0EAC432E6E70DF69028D72993016F88BAED1E6313AAA0B6ACA44825A80D829D263E9179E65E40FCB86AFF7EE2F4624E1589FAB4B704A118C7A2907C57F070B3BBEB6741D334FEDCC7974B983601B74B6DFA32D74C5597E3B6543828A567C953416B0C487038C0DF525476275BA045E726D40D256DBB93C898C6D522A7ADB88514959C8FDC47B619FE31520065812D788A4670155F9552CC935D735AE7965C70C4D439E0AB78871A89EFD68852ACF1F1AFF04D12E9F9BEDC0E89652B4EC6C6F747C56DC4CA3AAAF01C95E0AA1F0D1B48577F4690B21FE7735A1270C70385DEFCFA79C7A229A8478F10EFF6AD7A470BF41BAA30203010001";
//	private static final AssymetrischPaar NEW_USER_KEYS = new AssymetrischPaar(NEW_USER_PRIKEY + "." + NEW_USER_PUPKEY);
	private static final String SERVER_PRIKEY = "30820942020100300D06092A864886F70D01010105000482092C30820928020100028202010086FEC92728C472F308ACF02A7BBB1127BD16F12E7C5B159A387B3C2A085C9812947750F4A19902F2237D0A9D069FB59DD59C965AF8C07D0722B5AFDACB73D8ABE4DF1847D1FED1AB2F374E11D165180980235B1E42D6784D0EB2FCB20E17E78CA2FBC8FE0CC9ED231886DE0589C14DBDB86043690BDBC9306013BB76E7031D10177513C9C63F756CD6B128DCA9396BAAABC319A104A396722978BF228BD21329F5D5C140063F59CA8BB31C2B393AD02CD44312004444FBB608295BA94FFA05F942A1B39B0BC4B398FD4866DA036BCF6E3E46DBDCE4E6783C61F8DD7DC2DDE437C8EFB0577C1345EFCBB4C66AC9B8AD2561E905FCBEDF827A94711A13225BA2A3EA8A6D65AAA3FB1B76DAB4258F506654EC298D6BB93F6F3545F3EC43E2FA4E6CAC5D8CCC81CC02A7209043F0B08AC205BC5D11E561E1647E469F7B232C3EECFDA6BB23284F2259BE8E18CDA3F14F9AAED18AE7F36DB825D3355C736839963BAC78C7D16DF45BC563B026F2706EB45CB6D0990DB3E1FCAEC9AF83BBB70294C28E07B3458F9E4600B9903D501F5EC1AB181FCEDE19AB79987D4BC0D2009E30910972FCCE4B715E5119A120E8BAC3C30B8F42E0F194B06766BB8AA7E476F4DDDD1B8CEFD4F6E159030169D565B6504850191B4613B3AE87A5BE01529DD31F77504D321C8566B4D1E3D63B7656EAFE702584D29B5FCD70BF88CFED6C33D398FB765D020301000102820200535173D3807CE7398B1439D2EEB5019C963F4FB2523C6173E302649AC8B8657FAA348E39BE7752F321E62E23C68FD2274D4D2D1B8EC63724AD4E97F0217C29B1C63BCF9F9C437B22FDAC53B9F9943CA6B87899E76E77329ED4C0B1E82F7C9F84149FF468A07A0CAB899ACBF37D175AA50AE4171701A3B063F41899AE845C4E96BCF39CB7FF6CF14BB0A27D46DC073DA58407918CE8F1128CF97DB5F25B7BD82A20B9C26182B99CF0BF125803717A143C66F1D26D69B56DE9E6D5A7E6331F6C8A708E9EECC5F1ACAB73403982BB73D1FE07DFF2193F09E411D8A2220A59B85BFFF63BC189ED6173DBD1CD8C5D228DA2081D8B160FEDBAC3AC666BFC1CED2AC3911C6BE8C4BD5CF00F030F010BED691F4E0EA94E8742A115564F27A75F7037B15BC617CB02C71DC66C2425464A8F24D805D26998F42F9D129852F66DA3BA77633ECF3F85AEF520D07C9ABE9EE81CB063E0B4DF60F6A02323E28CD9413F75CF0C10073D96B1451BBBA16BC46ABC37ED7AB0BA22A8625B62B5096446C165AEB298DE1C66FCC0315F75B8ECFBDA0A4E317C2395616159E1C7A4FE000B45599A1588D8FC1EB507D2AAF5F94BB04EC54513D26617E9C32D047BE3B878995F41FF2F00EE78563639204AC27B501B9B629EC107B9B8E0400E8E2FBF13F446C7B7E6CB4C327A992494127ADCD06996800A1299CF87066D2F7E7600C4301397A901F35D7E1D0282010100F19F8D15F0438F22E49FCA233E6718A9691D988189B2E51F6A716AD4219B46619A663E32D9781C988FDEF4D4A4BD8B45C85F75562366CA02DA0B9A2ED409A40A1F42B9752799DA440F6A11C2E8BE28B890D5FD026A5EB626C340F869E0484779B8CB66079B7B9BB5A2C68591EC17C42597E8D396DC2F7474CDAD560EDA13147AAAE871E9F917D88A48209C425A5B50FF18DBBFABEBC09FE0A6978C2AE5E19F1370E9C5FCF50A9FFF29D73C3028FEDE3CF5677EDD4BAEAF6E4B8A0C82F22A367AB0291479C13AB3CFC285CEE0CF18240DC5AA8732465BFA1054D052878852F3BD6F64206D04198F92F37DD7B04AEEAE1B3CCBAD957A062C5C4FB0530D84AD593702820101008F070ED000A48CE1C2CAC885E1291EBD573DDF3A6ABC373487E2B09492D0880305F19A9EBB885982A0DC47A615908CBCB5BC8412FD892D7EB62F5BC115EE39AA651BBD07B9203FF3BCBAF0370232B2741153DD3D3EA7366FBD746EEEAF2F6C7FA376BD5DF4CBBA6F512E07EB14E6B10563FB7B39C0526CA709510C4BA8F0362E84B07DB13D35DBD467F2BC30F6872F3997B98D67C2C9EBE974024233EC7A2406AC25E5EB024E555D0FB78774D719851FA80612165616EF153878DFB5CB4AAF351A97E38613E29F54AC9D75231F418F9CEDA2BB8E62D5578B0BBFB0FDB0BA8F791DEDE5F886819D0B494B435C2D6556FA42565D3DEF666802613CAFFFBA38E70B02820100102320D01B48D7D173C57C41985458605025EADE93ECBFC2B66036CB4E2749AF1119CD03A664903C5C377ED088E423DE1840CFDC5DE6EA8D0035102A1A7D3E5872B8091CDAF53A8F9B1BF16DBC0F9F369C6DBE4520078D50CF6F9267B7D3FBFA142E7974FE9C65CCDEBF3582866B1BED8AD4C0F4ED65B9F86718318C32625DD6C77D58C6509D9817BC33795C311EB22D2762DDCD44A48BC8FC3758E430903E08955CF79D2A5C784D1965479ECBCE21D79E68381FDD832032549736B8B425BF97B8163648DF6FE53C75F86BD5B5DF1DE151974F0A3B8ABF0BC22E5BA4B3A51EA4434143AD243DF4C9D2BB4FE1754FB58F1A235C47846BCF20A72DD68E2B934C4702820100740C7EF9483C3B4F06953084683FCC0046E41DD6B139CBF524784B5C118F7F7C2C7B6F4071DADCFDBF755BF1273824E90CF04B9D78F7AFE14B033C087BB9D2322E5D864FD8E690DD3BF9D5E45C35345436A6FC30B0404E4BF5C59E28AE1DE583DEE6FE1959016060E7D65878667A1391D320FE47CA83564365ACCC342B7BD40A84810B4B1EE62F5AB588DF273F304AA2093875C285EAFE2E6A8156A3F8B0D5C0503763C8FE12FEF246495C6FF20373DF4E9EB658473BCE7B4259D8F21163A4AB8ACB48C1C62AAFAAAD7008D6198B41724BE2291A0B991CB1E6337FF1274F081076B74B4C0E1EE6847CD0C373EC2578A00FE931388AA165ACE0A6B40AE3573E270282010100DCC16C4A2C5DC6C8362D5692ED0F238D44AD378904D0FA0F970D02225E57CD8C3C9F9C2AE7365B0BDD9D9352D92A39AE382C0D67F41BB2D7B05977380A0A0B47206CEA072C7290939C142D579A02570FB17F4C3023B91CA7BD499BCA60A6452C0BE7BA4D1C6C731382FA1C31824C2AE557AFA2EBE5E7389C5D491CF530C3DC12D5972C3C14222EA12ACC321BE4BA094A36AD07BDD2B0A1F093F5E89996A1411761108D54518D7DE83D40EDA40BF80C057EDA1908BD92F1790635C73D286D5DB5B06DEBD7F613729FDB3F8F21522B6D3316E2A8B732190FA1581404C18894A419224D8A0DD99ABCF61E8B6C39DE495DD8FF3D9017CA9E51FA7D97426955560169";
	private static final String SERVER_PUP_KEY = "30820222300D06092A864886F70D01010105000382020F003082020A028202010086FEC92728C472F308ACF02A7BBB1127BD16F12E7C5B159A387B3C2A085C9812947750F4A19902F2237D0A9D069FB59DD59C965AF8C07D0722B5AFDACB73D8ABE4DF1847D1FED1AB2F374E11D165180980235B1E42D6784D0EB2FCB20E17E78CA2FBC8FE0CC9ED231886DE0589C14DBDB86043690BDBC9306013BB76E7031D10177513C9C63F756CD6B128DCA9396BAAABC319A104A396722978BF228BD21329F5D5C140063F59CA8BB31C2B393AD02CD44312004444FBB608295BA94FFA05F942A1B39B0BC4B398FD4866DA036BCF6E3E46DBDCE4E6783C61F8DD7DC2DDE437C8EFB0577C1345EFCBB4C66AC9B8AD2561E905FCBEDF827A94711A13225BA2A3EA8A6D65AAA3FB1B76DAB4258F506654EC298D6BB93F6F3545F3EC43E2FA4E6CAC5D8CCC81CC02A7209043F0B08AC205BC5D11E561E1647E469F7B232C3EECFDA6BB23284F2259BE8E18CDA3F14F9AAED18AE7F36DB825D3355C736839963BAC78C7D16DF45BC563B026F2706EB45CB6D0990DB3E1FCAEC9AF83BBB70294C28E07B3458F9E4600B9903D501F5EC1AB181FCEDE19AB79987D4BC0D2009E30910972FCCE4B715E5119A120E8BAC3C30B8F42E0F194B06766BB8AA7E476F4DDDD1B8CEFD4F6E159030169D565B6504850191B4613B3AE87A5BE01529DD31F77504D321C8566B4D1E3D63B7656EAFE702584D29B5FCD70BF88CFED6C33D398FB765D0203010001";
	private static AssymetrischPaar SERVER_KEYS;
	
	private static String EXISTING_USERNAME = "BENjamin";
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		SERVER_KEYS = new AssymetrischPaar(SERVER_PRIKEY + "-" + SERVER_PUP_KEY);
	}
	
	@BeforeEach
	void setUp() throws Exception {
		
	}
	
	@Test
	@Disabled
	void testAnmeldenNOT_FINISH() throws IOException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		SecurityManagerInterface secureMock = mock(SecurityManagerInterface.class);
		
		System.out.println("PW:\t" + EXISTING_USER_PW);
		System.out.println("HASH:\t" + Rules.generatePwHash(12548L));
		
		when(kommMock.sendMessage(Constants.IS_ALIVE)).thenReturn(Constants.TRUE);
		when(kommMock.sendMessage(Constants.USER_EXISTS + EXISTING_USERNAME)).thenReturn(Constants.TRUE);
		when(secureMock.encrypt(any(), any()));
		
		fail("Not yet Implemented.");
		
		Schnittstelle.setKommunikation(kommMock);
		Schnittstelle.setSecurityManager(secureMock);
		
		
		
	}
	
	@Test
	void testErstellen() throws IOException, UserException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		SecurityManagerInterface secureMock = mock(SecurityManagerInterface.class);
		
		when(kommMock.sendMessage(Constants.IS_ALIVE)).thenReturn(Constants.TRUE);
		when(kommMock.sendMessage(Constants.USER_EXISTS + NEW_USERNAME)).thenReturn(Constants.FALSE);
		
		when(kommMock.sendMessage(Constants.GET_PUBLIC_KEY_FROM_SERVER)).thenReturn(SERVER_PUP_KEY);
		when(secureMock.encrypt(any(), any())).thenReturn(VERSCHLÜSSELT_NEW_USER_SENDING);
		when(kommMock.sendMessage(Constants.ENCRYPTED + Constants.COMMAND_SPLITTER + VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedSeed() + Constants.COMMAND_SPLITTER
				+ VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedMessage())).thenReturn(NEW_USER_THING_WHICH_COME_FROM_SERVER);
		when(secureMock.decrypt(VERSCHLÜSSELT_NEW_USER_SENDING.getSeed(), NEW_USER_THING_WHICH_COME_FROM_SERVER))
				.thenReturn(NEW_USER_PW + Constants.COMMAND_SPLITTER + NEW_USER_PRIKEY_ENC);
		Schnittstelle.setKommunikation(kommMock);
		Schnittstelle.setSecurityManager(secureMock);
		
		Benutzer.erstellen(NEW_USERNAME);
	}
	
	@Test
	void testErstellenWithoutServerIsAlive() throws IOException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		SecurityManagerInterface secureMock = mock(SecurityManagerInterface.class);
		
		when(kommMock.sendMessage(Constants.IS_ALIVE)).thenReturn(Constants.FALSE);
		when(kommMock.sendMessage(Constants.USER_EXISTS + NEW_USERNAME)).thenReturn(Constants.FALSE);
		
		when(kommMock.sendMessage(Constants.GET_PUBLIC_KEY_FROM_SERVER)).thenReturn(SERVER_PUP_KEY);
		when(secureMock.encrypt(any(), any())).thenReturn(VERSCHLÜSSELT_NEW_USER_SENDING);
		when(kommMock.sendMessage(Constants.ENCRYPTED + Constants.COMMAND_SPLITTER + VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedSeed()
				+ Constants.COMMAND_SPLITTER + VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedMessage())).thenReturn(NEW_USER_THING_WHICH_COME_FROM_SERVER);
		when(secureMock.decrypt(VERSCHLÜSSELT_NEW_USER_SENDING.getSeed(), NEW_USER_THING_WHICH_COME_FROM_SERVER))
				.thenReturn(NEW_USER_PW + Constants.COMMAND_SPLITTER + NEW_USER_PRIKEY_ENC);
		
		Schnittstelle.setKommunikation(kommMock);
		Schnittstelle.setSecurityManager(secureMock);
		
		assertThrows(RuntimeException.class, () -> Benutzer.erstellen(NEW_USERNAME));
	}
	
	@Test
	void testErstellenUserExists() throws IOException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		SecurityManagerInterface secureMock = mock(SecurityManagerInterface.class);
		
		when(kommMock.sendMessage(Constants.IS_ALIVE)).thenReturn(Constants.TRUE);
//		USer exists already
		when(kommMock.sendMessage(Constants.USER_EXISTS + NEW_USERNAME)).thenReturn(Constants.TRUE);
		
		when(kommMock.sendMessage(Constants.GET_PUBLIC_KEY_FROM_SERVER)).thenReturn(SERVER_PUP_KEY);
		when(secureMock.encrypt(any(), any())).thenReturn(VERSCHLÜSSELT_NEW_USER_SENDING);
		when(kommMock.sendMessage(Constants.ENCRYPTED + Constants.COMMAND_SPLITTER + VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedSeed()
				+ Constants.COMMAND_SPLITTER + VERSCHLÜSSELT_NEW_USER_SENDING.getEncryptedMessage())).thenReturn(NEW_USER_THING_WHICH_COME_FROM_SERVER);
		when(secureMock.decrypt(VERSCHLÜSSELT_NEW_USER_SENDING.getSeed(), NEW_USER_THING_WHICH_COME_FROM_SERVER))
				.thenReturn(NEW_USER_PW + Constants.COMMAND_SPLITTER + NEW_USER_PRIKEY_ENC);
		
		Schnittstelle.setKommunikation(kommMock);
		Schnittstelle.setSecurityManager(secureMock);
		
//		USer exists already
		assertThrows(UserAlreadyExistsException.class, () -> Benutzer.erstellen(NEW_USERNAME));
	}
	
	@Test
	@Disabled
	void testErstellenAlt2() throws IOException, UserException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		
		when(kommMock.sendMessage("")).thenReturn("");
		
		Schnittstelle.setKommunikation(kommMock);
		
		UserErgebnis userErgebnis = Benutzer.erstellen(NEW_USERNAME);
		
		assertNotNull(userErgebnis.getUserKey());
		assertEquals(NEW_USERNAME, userErgebnis.getUserKey().getName());
		verify(kommMock).sendMessage("");
	}
	
	@Test
	@Disabled
	void testErstellenAlt() throws IOException, UserException {
		KommunikationInterface kommMock = mock(KommunikationInterface.class);
		
		when(kommMock.sendMessage(Constants.USER_EXISTS + NEW_USERNAME)).thenReturn(Constants.FALSE);
		when(kommMock.sendMessage(Constants.GET_PUBLIC_KEY_FROM_SERVER)).thenReturn(SERVER_PUP_KEY);
		when(kommMock.sendMessage(argThat(new StartsWith(Constants.SEND_NEW_USER_TO_SERVER + NEW_USERNAME))))
				.thenReturn(NEW_USER_PW + Constants.COMMAND_SPLITTER + NEW_USER_PRIKEY);
		
		Schnittstelle.setKommunikation(kommMock);
		
		UserErgebnis userErgebnis = Benutzer.erstellen(NEW_USERNAME);
		
		assertNotNull(userErgebnis.getUserKey());
		assertEquals(NEW_USERNAME, userErgebnis.getUserKey().getName());
		verify(kommMock).sendMessage(Constants.USER_EXISTS + NEW_USERNAME);
	}
	
}
